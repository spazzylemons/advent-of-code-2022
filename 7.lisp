(load "util.lisp")

(defparameter *part-1-result* 0)
(defparameter *part-1-threshold* 100000)
(defparameter *directories* nil)
(defparameter *disk-size* 70000000)
(defparameter *required-space* 30000000)

(defun tree-walk (mappings key)
  (let ((sum 0))
    (dolist (child (gethash key mappings))
      (if (car child)
        (setf sum (+ sum (car child)))
        (setf sum (+ sum (tree-walk mappings (append (list (cdr child)) key))))))
    (when (<= sum *part-1-threshold*)
      (setf *part-1-result* (+ *part-1-result* sum)))
    (push sum *directories*)
    sum))

(let ((dir-stack nil)
      (mappings (make-hash-table :test #'equal)))
  (dolist (line (read-lines "input"))
    (let ((parts (split-string line)))
      (if (equal (car parts) "$")
            (when (equal (cadr parts) "cd")
              (cond ((equal (caddr parts) "/") (setf dir-stack nil))
                    ((equal (caddr parts) "..") (pop dir-stack))
                    (t (push (caddr parts) dir-stack))))
            (push (cons (if (equal (car parts) "dir")
                            nil
                            (parse-integer (car parts))) (cadr parts))
                        (gethash dir-stack mappings)))))
  (tree-walk mappings nil)
  (format t "part 1: ~a~%" *part-1-result*)
  (let ((best-choice *disk-size*))
    (dolist (entry *directories*)
      (let ((free-space (- *disk-size* (- (car *directories*) entry))))
        (when (and (>= free-space *required-space*) (< entry best-choice))
          (setf best-choice entry))))
    (format t "part 2: ~a~%" best-choice)))
