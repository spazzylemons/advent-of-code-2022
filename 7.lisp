(load "util.lisp")

(defparameter *part-1-result* 0)
(defparameter *directories* nil)

(defun tree-walk (mappings key)
  (let ((sum 0))
    (dolist (child (gethash key mappings))
      (if (car child)
        (setf sum (+ sum (car child)))
        (setf sum (+ sum (tree-walk mappings (append (list (cdr child)) key))))))
    (when (<= sum 100000)
      (setf *part-1-result* (+ *part-1-result* sum)))
    (push sum *directories*)
    sum))

(let ((dir-stack nil)
      (mappings (make-hash-table :test #'equal)))
  (dolist (line (read-lines "input"))
    (let* ((parts (split-string line))
           (part-1 (car parts))
           (part-2 (cadr parts))
           (part-3 (caddr parts)))
      (cond ((equal part-1 "$")
             (cond ((equal part-2 "cd")
                    (cond ((equal part-3 "/") (setf dir-stack nil))
                          ((equal part-3 "..") (pop dir-stack))
                          (t (push part-3 dir-stack)))
                    (multiple-value-bind (_ present) (gethash dir-stack mappings)
                      (unless present (setf (gethash dir-stack mappings) nil))))
                   ((equal part-2 "ls") nil)))
            ((equal part-1 "dir")
             (push (cons nil part-2) (gethash dir-stack mappings)))
            (t
             (push (cons (parse-integer part-1) part-2) (gethash dir-stack mappings))))))
  (tree-walk mappings nil)
  (format t "part 1: ~a~%" *part-1-result*)
  (let ((best-choice 70000000))
    (dolist (entry *directories*)
      (let ((free-space (- 70000000 (- (car *directories*) entry))))
        (when (and (>= free-space 30000000)
                   (< entry best-choice))
          (setf best-choice entry))))
    (format t "part 2: ~a~%" best-choice)))
