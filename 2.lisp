(load "util.lisp")

(let ((choicemap (make-hash-table :test 'equal))
      (score 0))
  (setf (gethash '(A X) choicemap) (+ 3 1))
  (setf (gethash '(A Y) choicemap) (+ 6 2))
  (setf (gethash '(A Z) choicemap) (+ 0 3))
  (setf (gethash '(B X) choicemap) (+ 0 1))
  (setf (gethash '(B Y) choicemap) (+ 3 2))
  (setf (gethash '(B Z) choicemap) (+ 6 3))
  (setf (gethash '(C X) choicemap) (+ 6 1))
  (setf (gethash '(C Y) choicemap) (+ 0 2))
  (setf (gethash '(C Z) choicemap) (+ 3 3))
  (dolist (line (read-lines "input"))
     (let ((parts (map 'list #'read-from-string (split-string line))))
       (setf score (+ score (gethash parts choicemap)))))
  (format t "part 1: ~a~%" score))

(let ((choicemap (make-hash-table :test 'equal))
      (score 0))
  (setf (gethash '(A X) choicemap) (+ 0 3))
  (setf (gethash '(A Y) choicemap) (+ 3 1))
  (setf (gethash '(A Z) choicemap) (+ 6 2))
  (setf (gethash '(B X) choicemap) (+ 0 1))
  (setf (gethash '(B Y) choicemap) (+ 3 2))
  (setf (gethash '(B Z) choicemap) (+ 6 3))
  (setf (gethash '(C X) choicemap) (+ 0 2))
  (setf (gethash '(C Y) choicemap) (+ 3 3))
  (setf (gethash '(C Z) choicemap) (+ 6 1))
  (dolist (line (read-lines "input"))
     (let ((parts (map 'list #'read-from-string (split-string line))))
       (setf score (+ score (gethash parts choicemap)))))
  (format t "part 2: ~a~%" score))
