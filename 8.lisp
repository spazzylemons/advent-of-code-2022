(load "util.lisp")

(defun scenic-score-up (grid y x)
  (let ((result 0) (n y))
    (loop while (and (>= n 0) (or (= n y) (< (aref grid n x) (aref grid y x))))
          do (incf result) (decf n))
    (when (< n 0) (decf result))
    result))

(defun scenic-score-left (grid y x)
  (let ((result 0) (n x))
    (loop while (and (>= n 0) (or (= n x) (< (aref grid y n) (aref grid y x))))
          do (incf result) (decf n))
    (when (< n 0) (decf result))
    result))

(defun scenic-score-right (grid y x size)
  (let ((result 0) (n x))
    (loop while (and (< n size) (or (= n x) (< (aref grid y n) (aref grid y x))))
          do (incf result) (incf n))
    (when (= n size) (decf result))
    result))

(defun scenic-score-down (grid y x size)
  (let ((result 0) (n y))
    (loop while (and (< n size) (or (= n y) (< (aref grid n x) (aref grid y x))))
          do (incf result) (incf n))
    (when (= n size) (decf result))
    result))

(defun get-scenic-score (grid y x size)
  (* (scenic-score-up grid y x)
     (scenic-score-left grid y x)
     (scenic-score-right grid y x size)
     (scenic-score-down grid y x size)))

(let* ((lines (read-lines "input"))
       (size (length lines))
       (grid (make-array (list size size)))
       (part-1-result (* 4 (1- size)))
       (part-2-result 0))
  (let ((y 0))
    (dolist (line lines)
      (dotimes (x (length line))
        (setf (aref grid y x) (parse-integer (subseq line x (1+ x)))))
      (incf y)))
  (loop for y0 from 1 below (1- size)
        do (loop for x0 from 1 below (1- size)
                 do (block check
                      (let ((max-tree 0))
                        (loop for x1 from 0 below x0
                              do (setf max-tree (max (aref grid y0 x1) max-tree)))
                        (when (< max-tree (aref grid y0 x0))
                          (incf part-1-result)
                          (return-from check)))
                      (let ((max-tree 0))
                        (loop for x1 from (1+ x0) below size
                              do (setf max-tree (max (aref grid y0 x1) max-tree)))
                        (when (< max-tree (aref grid y0 x0))
                          (incf part-1-result)
                          (return-from check)))
                      (let ((max-tree 0))
                        (loop for y1 from 0 below y0
                              do (setf max-tree (max (aref grid y1 x0) max-tree)))
                        (when (< max-tree (aref grid y0 x0))
                          (incf part-1-result)
                          (return-from check)))
                      (let ((max-tree 0))
                        (loop for y1 from (1+ y0) below size
                              do (setf max-tree (max (aref grid y1 x0) max-tree)))
                        (when (< max-tree (aref grid y0 x0))
                          (incf part-1-result)
                          (return-from check))))
                    (setf part-2-result (max part-2-result (get-scenic-score grid y0 x0 size)))))
  (format t "~a~%" part-1-result)
  (format t "~a~%" part-2-result))
