(defun parse-input (filename)
  (let ((l nil))
    (with-open-file (file filename)
      (loop
        (handler-case
          (push (parse-integer (read-line file)) l)
          (end-of-file () (return)))))
    (setf l (nreverse l))
    (make-array (length l) :initial-contents l)))

(defun mix (filename decryption-key repeat-count)
  (let* ((l (parse-input filename))
       (num-elements (array-dimension l 0))
       (index-map (make-array num-elements))
       (reverse-map (make-array num-elements)))
  (dotimes (i num-elements)
    (setf (aref l i) (* (aref l i) decryption-key))
    (setf (aref index-map i) i)
    (setf (aref reverse-map i) i))
  (dotimes (_ repeat-count)
    (dotimes (i num-elements)
      (let* ((index (aref index-map i))
             (value (mod (aref l index) (1- num-elements))))
        (when (> value (/ num-elements 2))
          (setf value (- value (1- num-elements))))
        (cond ((> value 0)
               ; mix right
               (let ((index-a index))
                 (dotimes (_ value)
                   (let ((index-b (mod (1+ index-a) num-elements)))
                     (rotatef (aref l index-a) (aref l index-b))
                     (rotatef (aref reverse-map index-a) (aref reverse-map index-b))
                     (rotatef (aref index-map (aref reverse-map index-a)) (aref index-map (aref reverse-map index-b)))
                     (setf index-a index-b)))))
              ((< value 0)
               ; mix left
               (let ((index-a index))
                 (dotimes (_ (- value))
                   (let ((index-b (mod (1- index-a) num-elements)))
                     (rotatef (aref l index-a) (aref l index-b))
                     (rotatef (aref reverse-map index-a) (aref reverse-map index-b))
                     (rotatef (aref index-map (aref reverse-map index-a)) (aref index-map (aref reverse-map index-b)))
                     (setf index-a index-b)))))))))
  (let ((zero-location 0))
    (loop
      (when (= (aref l zero-location) 0)
        (return))
      (incf zero-location))
    (+ (aref l (mod (+ zero-location 1000) num-elements))
       (aref l (mod (+ zero-location 2000) num-elements))
       (aref l (mod (+ zero-location 3000) num-elements))))))

(format t "part 1: ~a~%" (mix "input" 1 1))
(format t "part 2: ~a~%" (mix "input" 811589153 10))
