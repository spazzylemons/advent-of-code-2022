(load "util.lisp")

(let ((x 1) (cycle 0) (part-1-result 0) (pixels nil))
  (dolist (line (read-lines "input"))
    (let* ((parts (split-string line))
           (instruction (car parts))
           (operand (cadr parts)))
      (dotimes (_ (if (equal instruction "addx") 2 1))
        (push (if (< (abs (- (mod cycle 40) x)) 2) #\# #\.) pixels)
        (incf cycle)
        (when (= (mod (+ cycle 20) 40) 0)
          (setf part-1-result (+ part-1-result (* cycle x)))))
      (when (equal instruction "addx")
        (setf x (+ x (parse-integer operand))))))
  (format t "part 1: ~a~%" part-1-result)
  (setf pixels (nreverse pixels))
  (dotimes (y 6)
    (dotimes (x 40)
      (format t "~a" (car pixels))
      (setf pixels (cdr pixels)))
    (format t "~%")))
